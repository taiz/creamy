/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package creamy.activity;

import creamy.scene.control.CFButtonBuilder;
import creamy.scene.control.CFTextFieldBuilder;
import creamy.scene.control.*;
import creamy.scene.layout.CFGridForm;
import creamy.scene.layout.CFHForm;
import java.util.ArrayList;
import java.util.List;
import javafx.geometry.Pos;
import javafx.scene.Node;
import javafx.scene.control.LabelBuilder;
import javafx.scene.layout.HBox;
import javafx.scene.layout.HBoxBuilder;
import javafx.scene.layout.Pane;
import javafx.util.Builder;

/**
 *
 * @author ahayama
 */
public class ActivityHelper {
    
    //TODO:使ってないから削除していいか聞く public Pane form;

    public CFGridForm gridForm(String path) {
        CFGridForm gForm = new CFGridForm(path);
        return gForm;
    }
    
    public CFHForm hform(String path) {
        CFHForm hForm = new CFHForm(path);
        return hForm;
    }
    
    public LabelBuilder<? extends LabelBuilder> label(String text) {
        return LabelBuilder.create().text(text);
    }
    
    public CFTextFieldBuilder<? extends CFTextFieldBuilder> text(String name) {
        return CFTextFieldBuilder.create().name(name);
    }
    
    public CFChoiceBoxBuilder<?, ? extends CFChoiceBoxBuilder> choice(String name) {
        return CFChoiceBoxBuilder.create().name(name);
    }
    
//    public CFChoiceBox choice(String name) {
//        CFChoiceBox choice = new CFChoiceBox(name);
//        return choice;
//    }
    
    public CFButtonBuilder<? extends CFButtonBuilder> button(String name) {
        return CFButtonBuilder.create().name(name);
    }
 
    public CFHyperlinkBuilder<? extends CFHyperlinkBuilder> hyperlink(String path) {
        return CFHyperlinkBuilder.create().path(path);
    }
    
    public CFLinkButtonBuilder<? extends CFLinkButtonBuilder> linkbutton(String path) {
        return CFLinkButtonBuilder.create().path(path);
    }    
    
    public CFSubmitButtonBuilder<? extends CFSubmitButtonBuilder> submit(String text) {
        return CFSubmitButtonBuilder.create().text(text);
    }
    
    /*
    public HBox hbox(Node... children) {
        HBox hbox = new HBox();
        hbox.getChildren().addAll(children);
        return hbox;
    }
    */
    
    public HBoxBuilder<?> hbox(Builder... builders) {
        HBoxBuilder<?> builder = HBoxBuilder.create();
        List<Node> children = new ArrayList<Node>();
        for (Builder b : builders) children.add((Node)b.build());
        return builder.children(children);
    }

    public HBoxBuilder<?> hbox(Node... children) {
        HBoxBuilder<?> builder = HBoxBuilder.create();
        builder.children(children);
        return builder;
    }
}
