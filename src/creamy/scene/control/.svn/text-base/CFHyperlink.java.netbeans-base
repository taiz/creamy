package creamy.scene.control;

import creamy.browser.Broker;
import creamy.browser.RequestHelper;
import creamy.mvc.Request;
import java.util.Comparator;
import javafx.beans.property.SimpleStringProperty;
import javafx.beans.property.StringProperty;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.scene.control.ContextMenu;
import javafx.scene.control.Hyperlink;
import javafx.scene.control.MenuItem;
import javafx.scene.input.MouseButton;
import javafx.scene.input.MouseEvent;

public class CFHyperlink extends Hyperlink implements UnitRequest {
    
    private RequestHelper helper;
    private StringProperty method;
    private StringProperty path;
    
    public CFHyperlink() {
        helper = new RequestHelper(this);
        method = new SimpleStringProperty(Request.GET);
        path = new SimpleStringProperty();
        
        // Event Action
        this.setOnAction(new EventHandler<ActionEvent>() {
            @Override
            public void handle(ActionEvent event) {
                Broker broker = helper.getBroker();
                if (broker == null) return;
                broker.sendRequest(CFHyperlink.this);
            }
        });
        /*
        //this.setStyle("-fx-text-fill: #0000ff;");
        
        // Right click menu
        final ContextMenu cm = new ContextMenu();
        MenuItem rightMenu = new MenuItem("Open in new tab");
        rightMenu.setOnAction(new EventHandler<ActionEvent>() {
        public void handle(ActionEvent e) {
            System.out.println("right click prosessing");
            //helper.openInNewTab();
            }
        });
        cm.getItems().add(rightMenu);
        EventHandler<MouseEvent> handler = new EventHandler<MouseEvent>() {
                @Override
                public void handle(MouseEvent event) {
                    if (!(MouseButton.SECONDARY == event.getButton())) return;
                    cm.show(CFHyperlink.this, event.getScreenX(), event.getScreenY());
                };
            };
        
        this.addEventFilter(MouseEvent.MOUSE_CLICKED, handler);
        * 
        */
    }

    public CFHyperlink(String path) {
        this();
        this.path.set(path);
    }
    
    @Override
    public String getMethod() {
        return method.get();
    }
    
    @Override
    public String getPath() {
        return path.get();
    }

    public void setPath(String path) {
        this.path.set(path);
    }
    
    public static class Comprator implements Comparator<CFHyperlink> {
        @Override
        public int compare(CFHyperlink c1, CFHyperlink c2) {
            return c1.getText().toLowerCase().compareTo(c2.getText().toLowerCase());
        }
    }
    
    public static class CaseComprator implements Comparator<CFHyperlink> {
        @Override
        public int compare(CFHyperlink c1, CFHyperlink c2) {
            return c1.getText().compareTo(c2.getText());
        }
    }
}
